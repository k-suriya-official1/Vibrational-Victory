// Google Apps Script for To-Do List Application

// Global variables
const SHEET_NAME = "Tasks";
const SHEET_TITLE = "To-Do List Tasks";

// Create a web app that can be accessed by anyone
function doGet(e) {
  const action = e.parameter.action;
  
  // Handle different GET requests
  switch(action) {
    case "getTasks":
      return getTasks();
    default:
      return ContentService.createTextOutput(
        JSON.stringify({
          success: false,
          message: "Invalid action specified"
        })
      ).setMimeType(ContentService.MimeType.JSON);
  }
}

// Handle POST requests
function doPost(e) {
  const action = e.parameter.action;
  
  // Handle different POST requests
  switch(action) {
    case "addTask":
      return addTask(e.parameter);
    case "updateTask":
      return updateTask(e.parameter);
    case "deleteTask":
      return deleteTask(e.parameter);
    case "updateStatus":
      return updateStatus(e.parameter);
    default:
      return ContentService.createTextOutput(
        JSON.stringify({
          success: false,
          message: "Invalid action specified"
        })
      ).setMimeType(ContentService.MimeType.JSON);
  }
}

// Initialize the spreadsheet with proper columns, creating it if it doesn't exist
function initializeSpreadsheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName(SHEET_NAME);
  
  // Create the sheet if it doesn't exist
  if (!sheet) {
    sheet = ss.insertSheet(SHEET_NAME);
    sheet.setName(SHEET_NAME);
    
    // Set column headers
    sheet.appendRow([
      "ID",
      "Task",
      "Created Date",
      "Created Time",
      "Due Date",
      "Due Time",
      "Priority",
      "Status"
    ]);
    
    // Format the header row
    sheet.getRange(1, 1, 1, 8).setFontWeight("bold");
    sheet.setFrozenRows(1);
    
    // Set column widths
    sheet.setColumnWidth(1, 100);  // ID
    sheet.setColumnWidth(2, 300);  // Task
    sheet.setColumnWidth(3, 120);  // Created Date
    sheet.setColumnWidth(4, 120);  // Created Time
    sheet.setColumnWidth(5, 120);  // Due Date
    sheet.setColumnWidth(6, 120);  // Due Time
    sheet.setColumnWidth(7, 80);   // Priority
    sheet.setColumnWidth(8, 100);  // Status
  }
  
  return sheet;
}

// Get all tasks from the spreadsheet
function getTasks() {
  try {
    const sheet = initializeSpreadsheet();
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    
    // Skip the header row
    const tasks = [];
    for (let i = 1; i < values.length; i++) {
      const row = values[i];
      tasks.push({
        id: row[0],
        task: row[1],
        createdDate: formatDateForClient(row[2]),
        createdTime: formatTimeForClient(row[3]),
        dueDate: formatDateForClient(row[4]),
        dueTime: formatTimeForClient(row[5]),
        priority: row[6],
        status: row[7]
      });
    }
    
    return ContentService.createTextOutput(
      JSON.stringify({
        success: true,
        tasks: tasks
      })
    ).setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService.createTextOutput(
      JSON.stringify({
        success: false,
        message: error.toString()
      })
    ).setMimeType(ContentService.MimeType.JSON);
  }
}

// Add a new task to the spreadsheet
function addTask(params) {
  try {
    // Validate parameters
    if (!params.task || !params.dueDate || !params.dueTime || !params.priority) {
      return ContentService.createTextOutput(
        JSON.stringify({
          success: false,
          message: "Missing required parameters"
        })
      ).setMimeType(ContentService.MimeType.JSON);
    }
    
    const sheet = initializeSpreadsheet();
    
    // Generate a unique ID for the task
    const id = Utilities.getUuid();
    
    // Get current date and time
    const now = new Date();
    const createdDate = formatDateForStorage(now);
    const createdTime = formatTimeForStorage(now);
    
    // Format the due date consistently
    let formattedDueDate;
    try {
      // Try to parse the provided date
      const dueDate = new Date(params.dueDate);
      formattedDueDate = formatDateForStorage(dueDate);
    } catch (e) {
      // If parsing fails, store as is
      formattedDueDate = params.dueDate;
    }
    
    // Add the new task
    sheet.appendRow([
      id,
      params.task,
      createdDate,
      createdTime,
      formattedDueDate,
      params.dueTime,
      parseInt(params.priority),
      "Pending"
    ]);
    
    return ContentService.createTextOutput(
      JSON.stringify({
        success: true,
        message: "Task added successfully",
        taskId: id
      })
    ).setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService.createTextOutput(
      JSON.stringify({
        success: false,
        message: error.toString()
      })
    ).setMimeType(ContentService.MimeType.JSON);
  }
}

// Update an existing task
function updateTask(params) {
  try {
    // Validate parameters
    if (!params.id || !params.task || !params.dueDate || !params.dueTime || !params.priority) {
      return ContentService.createTextOutput(
        JSON.stringify({
          success: false,
          message: "Missing required parameters"
        })
      ).setMimeType(ContentService.MimeType.JSON);
    }
    
    const sheet = initializeSpreadsheet();
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    
    // Find the row with the matching ID
    let rowIndex = -1;
    for (let i = 1; i < values.length; i++) {
      if (values[i][0] === params.id) {
        rowIndex = i + 1; // Add 1 because array is 0-indexed but sheets are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      return ContentService.createTextOutput(
        JSON.stringify({
          success: false,
          message: "Task not found"
        })
      ).setMimeType(ContentService.MimeType.JSON);
    }
    
    // Format the due date consistently
    let formattedDueDate;
    try {
      // Try to parse the provided date
      const dueDate = new Date(params.dueDate);
      formattedDueDate = formatDateForStorage(dueDate);
    } catch (e) {
      // If parsing fails, store as is
      formattedDueDate = params.dueDate;
    }
    
    // Update the task
    // Keep ID, Created Date, Created Time, and Status the same
    sheet.getRange(rowIndex, 2).setValue(params.task);
    sheet.getRange(rowIndex, 5).setValue(formattedDueDate);
    sheet.getRange(rowIndex, 6).setValue(params.dueTime);
    sheet.getRange(rowIndex, 7).setValue(parseInt(params.priority));
    
    return ContentService.createTextOutput(
      JSON.stringify({
        success: true,
        message: "Task updated successfully"
      })
    ).setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService.createTextOutput(
      JSON.stringify({
        success: false,
        message: error.toString()
      })
    ).setMimeType(ContentService.MimeType.JSON);
  }
}

// Delete a task
function deleteTask(params) {
  try {
    // Validate parameters
    if (!params.id) {
      return ContentService.createTextOutput(
        JSON.stringify({
          success: false,
          message: "Missing task ID"
        })
      ).setMimeType(ContentService.MimeType.JSON);
    }
    
    const sheet = initializeSpreadsheet();
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    
    // Find the row with the matching ID
    let rowIndex = -1;
    for (let i = 1; i < values.length; i++) {
      if (values[i][0] === params.id) {
        rowIndex = i + 1; // Add 1 because array is 0-indexed but sheets are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      return ContentService.createTextOutput(
        JSON.stringify({
          success: false,
          message: "Task not found"
        })
      ).setMimeType(ContentService.MimeType.JSON);
    }
    
    // Delete the row
    sheet.deleteRow(rowIndex);
    
    return ContentService.createTextOutput(
      JSON.stringify({
        success: true,
        message: "Task deleted successfully"
      })
    ).setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService.createTextOutput(
      JSON.stringify({
        success: false,
        message: error.toString()
      })
    ).setMimeType(ContentService.MimeType.JSON);
  }
}

// Update the status of a task
function updateStatus(params) {
  try {
    // Validate parameters
    if (!params.id || !params.status) {
      return ContentService.createTextOutput(
        JSON.stringify({
          success: false,
          message: "Missing required parameters"
        })
      ).setMimeType(ContentService.MimeType.JSON);
    }
    
    const sheet = initializeSpreadsheet();
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    
    // Find the row with the matching ID
    let rowIndex = -1;
    for (let i = 1; i < values.length; i++) {
      if (values[i][0] === params.id) {
        rowIndex = i + 1; // Add 1 because array is 0-indexed but sheets are 1-indexed
        break;
      }
    }
    
    if (rowIndex === -1) {
      return ContentService.createTextOutput(
        JSON.stringify({
          success: false,
          message: "Task not found"
        })
      ).setMimeType(ContentService.MimeType.JSON);
    }
    
    // Update the status
    sheet.getRange(rowIndex, 8).setValue(params.status);
    
    return ContentService.createTextOutput(
      JSON.stringify({
        success: true,
        message: "Task status updated successfully"
      })
    ).setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService.createTextOutput(
      JSON.stringify({
        success: false,
        message: error.toString()
      })
    ).setMimeType(ContentService.MimeType.JSON);
  }
}

// ----- HELPER FUNCTIONS FOR DATE AND TIME FORMATTING -----

// Format date for storage in the spreadsheet (YYYY-MM-DD)
function formatDateForStorage(date) {
  if (!date) return "";
  
  try {
    // If it's a string, try to parse it
    if (typeof date === "string") {
      date = new Date(date);
    }
    
    if (isNaN(date.getTime())) {
      return ""; // Invalid date
    }
    
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const day = String(date.getDate()).padStart(2, "0");
    
    return `${year}-${month}-${day}`;
  } catch (e) {
    Logger.log("Error in formatDateForStorage: " + e);
    return "";
  }
}

// Format time for storage in the spreadsheet (HH:MM)
function formatTimeForStorage(date) {
  if (!date) return "";
  
  try {
    // If it's a string, try to parse it
    if (typeof date === "string") {
      // If it's already in HH:MM format, return as is
      if (/^\d{1,2}:\d{2}$/.test(date)) {
        return date;
      }
      
      date = new Date(date);
    }
    
    if (isNaN(date.getTime())) {
      return ""; // Invalid date
    }
    
    const hours = String(date.getHours()).padStart(2, "0");
    const minutes = String(date.getMinutes()).padStart(2, "0");
    
    return `${hours}:${minutes}`;
  } catch (e) {
    Logger.log("Error in formatTimeForStorage: " + e);
    return "";
  }
}

// Format date for client (DD/MM/YYYY)
function formatDateForClient(date) {
  if (!date) return "";
  
  try {
    // If it's a string, try to parse it
    if (typeof date === "string") {
      // Check if it's already in DD/MM/YYYY format
      if (/^\d{1,2}\/\d{1,2}\/\d{4}$/.test(date)) {
        return date;
      }
      
      // Try to parse YYYY-MM-DD format
      if (/^\d{4}-\d{1,2}-\d{1,2}$/.test(date)) {
        const parts = date.split('-');
        return `${parts[2]}/${parts[1]}/${parts[0]}`;
      }
      
      date = new Date(date);
    }
    
    if (isNaN(date.getTime())) {
      return ""; // Invalid date
    }
    
    const day = String(date.getDate()).padStart(2, "0");
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const year = date.getFullYear();
    
    return `${day}/${month}/${year}`;
  } catch (e) {
    Logger.log("Error in formatDateForClient: " + e);
    return date.toString(); // Return original value on error
  }
}

// Format time for client display (HH:MM)
function formatTimeForClient(time) {
  if (!time) return "";
  
  try {
    // If it's already in HH:MM format, return as is
    if (typeof time === "string" && /^\d{1,2}:\d{2}$/.test(time)) {
      // Ensure proper formatting with leading zeros
      const parts = time.split(':');
      const hours = String(parseInt(parts[0])).padStart(2, "0");
      const minutes = String(parseInt(parts[1])).padStart(2, "0");
      return `${hours}:${minutes}`;
    }
    
    // Try to parse timestamp
    if (typeof time === "string" && time.includes('T')) {
      const timePart = time.split('T')[1];
      return timePart.substring(0, 5); // Extract HH:MM
    }
    
    // If it's a date object
    if (time instanceof Date && !isNaN(time.getTime())) {
      const hours = String(time.getHours()).padStart(2, "0");
      const minutes = String(time.getMinutes()).padStart(2, "0");
      return `${hours}:${minutes}`;
    }
    
    // Try to create a new date
    const date = new Date(time);
    if (!isNaN(date.getTime())) {
      const hours = String(date.getHours()).padStart(2, "0");
      const minutes = String(date.getMinutes()).padStart(2, "0");
      return `${hours}:${minutes}`;
    }
    
    return time.toString(); // Return original string if can't parse
  } catch (e) {
    Logger.log("Error in formatTimeForClient: " + e);
    return time.toString(); // Return original value on error
  }
}